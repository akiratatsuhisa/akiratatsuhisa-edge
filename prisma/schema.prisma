generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Contact {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phone       String
  message     String
  isCancelled Boolean @default(false)
  ipAddress   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("contacts")
}

enum LanguageCode {
  ENGLISH    @map("en")
  VIETNAMESE @map("vi")
  JAPANESE   @map("ja")

  @@map("languageCodes")
}

enum Language {
  C_SHARP    @map("csharp")
  CSS        @map("css")
  DART       @map("dart")
  GO         @map("go")
  HTML       @map("html")
  JAVASCRIPT @map("javascript")
  PYTHON     @map("python")
  SASS       @map("sass")
  TYPESCRIPT @map("typescript")

  @@map("languages")
}

enum Framework {
  ANGULAR     @map("angular")
  BOOTSTRAP   @map("bootstrap")
  DJANGO      @map("django")
  DOTNET_CORE @map("dotnetcore")
  EXPRESS     @map("express")
  FLUTTER     @map("flutter")
  NEXT        @map("next")
  NEST        @map("nest")
  NODEJS      @map("nodejs")
  NUXT        @map("nuxt")
  REACT       @map("react")
  TAILWINDCSS @map("tailwindcss")
  VUE         @map("vue")

  @@map("frameworks")
}

enum Database {
  ELASTICSEARCH @map("elasticsearch")
  MONGODB       @map("mongodb")
  MYSQL         @map("mysql")
  NEO4J         @map("neo4j")
  POSTGRESQL    @map("postgresql")
  REDIS         @map("redis")
  SQLITE        @map("sqlite")

  @@map("databases")
}

enum Technology {
  AWS       @map("aws")
  AZURE     @map("azure")
  DOCKER    @map("docker")
  ESLINT    @map("eslint")
  FIGMA     @map("figma")
  GITHUB    @map("github")
  GRAPHQL   @map("graphql")
  NGINX     @map("nginx")
  SOCKET_IO @map("socketio")

  @@map("technologies")
}

enum ProjectStatus {
  INITIALIZE @map("initialize")
  ON_GOING   @map("onGoing")
  MAINTAIN   @map("maintain")
  DELAY      @map("delay")
  CANCEL     @map("cancel")
  PUBLISH    @map("publish")

  @@map("projectStatus")
}

model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  thumbSrc    String?
  sort        Int     @default(0)
  isPublished Boolean @default(false)

  startDate DateTime?
  endDate   DateTime?
  status    ProjectStatus @default(INITIALIZE)

  imageSrcs    String[]     @default([])
  languages    Language[]   @default([])
  frameworks   Framework[]  @default([])
  databases    Database[]   @default([])
  technologies Technology[] @default([])
  others       String[]     @default([])

  views Int @default(0)

  projectLocalizations ProjectLocalization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("projects")
}

model ProjectLocalization {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  slug String

  projectId    String       @map("project_id") @db.ObjectId
  languageCode LanguageCode

  title       String
  description String?
  client      String?
  website     String?
  source      String?

  project Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([slug, languageCode])
  @@unique([projectId, languageCode])
  @@map("projectLocalizations")
}
